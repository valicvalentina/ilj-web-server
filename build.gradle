// generating project:
// gradle init --type java-library
// $ gradle wrapper --gradle-version 7.3-rc-2
// $ mv lib/src ./
// $ mv lib/build.gradle ./
// next line removes line with include('lib')
// $ sed '/^include('\''lib'\'')$/d' > settings.gradle.tmp; rm settings.gradle; mv settings.gradle.tmp settings.gradle

// generating .gitignore 
// $ curl -sLw "\n" https://www.toptal.com/developers/gitignore/api/windows,linux,macos,java,eclipse,intellij,netbeans,gradle > .gitignore

// copy elements from this file that you need

// multiprojects:
//   https://docs.gradle.org/current/userguide/multi_project_builds.html
//   https://rominirani.com/gradle-tutorial-part-3-multiple-java-projects-5b1c4d1fbd8d

plugins {
    id 'java'
    id 'eclipse'
    id 'com.github.ben-manes.versions' version '0.39.0' // find new versions of dependency task: dependencyUpdates
    id 'com.adarshr.test-logger' version '3.0.0' // log tests in console
}

repositories {
    mavenCentral()
}

group = 'hr.fer.ilj'
archivesBaseName = 'ilj-tdd-template'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// enable preview features in compile
tasks.named('compileJava') {
  //options.compilerArgs += ["--enable-preview"]
}


tasks.named('test') {
   // runs tests with JUnit 5
    useJUnitPlatform()

    // enable preview features in tests
    //jvmArgs '--enable-preview'
}

// run all test except tagged with @Tag("integration")
// custom annotation example -> https://junit.org/junit5/docs/current/user-guide/#writing-tests-meta-annotations
tasks.register('unitTest', Test) {
    group = "verification"
    useJUnitPlatform { 
    	excludeTags 'integration'
    }
    // enable preview features in tests
    //jvmArgs '--enable-preview'
}

// logs running tests in console
testlogger {
    theme 'standard' // or 'plain'
}

dependencies {
    // for mapping POJO (DTO <--> Entity) http://modelmapper.org/getting-started/
    //implementation 'org.modelmapper:modelmapper:2.3.8'

    // Apache Commons BeanUtils - https://commons.apache.org/proper/commons-beanutils/apidocs/org/apache/commons/beanutils/BeanUtils.html
    // Tutorial: https://www.baeldung.com/apache-commons-beanutils
    //implementation 'commons-beanutils:commons-beanutils:1.9.4'

    // Apache Commons Lang3
    //   equals, hashcode, toString builders - http://www.java2s.com/Tutorial/Java/0500__Apache-Common/EqualsBuilderreflectionEquals.htm
    //   tuple, triple
    //implementation 'org.apache.commons:commons-lang3:3.11'

    // vavr - https://www.vavr.io/vavr-docs/
    //implementation 'io.vavr:vavr:0.9.3'


    // java 11 missing dependencies
    //implementation('javax.xml.bind:jaxb-api:2.3.1')
    //runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
    
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'

    //////// TESTING /////////
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    // parametrized tests
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    // Mockito
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'
    // AssertJ
    testImplementation 'org.assertj:assertj-core:3.21.0'
    // JSON 
    testImplementation 'com.revinate:assertj-json:1.2.0'
    // HTML 
    testImplementation 'org.jsoup:jsoup:1.14.3'
    // AWaitility
    testImplementation 'org.awaitility:awaitility:4.1.0'
    // REST Assured
    //testImplementation 'io.rest-assured:rest-assured:4.3.1'    
}

// kreira zip za predavanja
tasks.register('lectureZip', Zip) {
  group = "build"
  from project.fileTree("$project.projectDir") {
      exclude "$buildDir.name/**"
      exclude "bin/**"
      exclude ".gradle/**"
  }
  archiveFileName = project.name + ".zip"
  destinationDirectory = file("$buildDir")
}

// to check for new dependencies run following
// $ ./gradlew dependencyUpdates
